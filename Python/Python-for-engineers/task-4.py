# Рассчитываем предельные значения по нагрузке на сервис.

# Из системы логирования узнали, что средние значения RPS за последнее время были следующими:
# rps_values = (5081, '17184', 10968, 9666, '9102', 12321, '10617', 11633, 5035, 9554, '10424', 9378, '8577', '11602', 14116, '8066', '11977', '8572', 9685, 11062, '10561', '17820', 16637, 5890, 17180, '17511', '13203', 13303, '7330', 7186, '10213', '8063', '12283', 15564, 17664, '8996', '12179', '13657', 15817, '16187', '6381', 8409, '5177', 17357, '10814', 6679, 12241, '6556', 12913, 16454, '17589', 5292, '13639', '7335', '11531', '14346', 7493, 15850, '12791', 11288)

# Хочется понять: была ли нагрузка стабильной или это были всплески и резкие снижения.

# Необходимо посчитать среднее и медианное значение:
# - Если среднее и медианное значение будут примерно одинаковыми, то нагрузка была стабильной.
# - Если среднее сильно ниже медианы - были снижения.
# - Если сильно выше - были скачки.

# Критерием "сильного различия" можно считать отличие среднего от медианы более, чем на 30%.

# Медиана - это значение по обе стороны от которого находится одинаковое количество элементов.
# Для расчета медианы требуется отсортированная последовательность (этого можно добиться при помощи встроенной функции sorted())

# Её  можно рассчитать следующим образом:
# quotient, remainder = divmod(len(<здесь переменная с кортежем>), 2)
# median = <здесь переменная с кортежем>[quotient] if remainder else sum(<здесь переменная с кортежем>[quotient - 1:quotient + 1]) / 2

# Также стоит обратить внимание, что система сборка метрик иногда работает не совсем правильно и присылает строки вместо чисел.

# В качестве ответа укажите среднее значение (только целую часть),медианное значение (только целую часть) и вывод о исследовании нагрузки:
# - "Стабильная", если нагрузка была стабильной
# - "Скачки", если нагрузка резко возрастала
# - "Снижения", если нагрузка резко снижалась

# Например:
# 10000, 4000, Снижения

rps_values = (5081, '17184', 10968, 9666, '9102', 12321, '10617', 11633, 5035, 9554, '10424', 9378, '8577', '11602', 14116, '8066', '11977', '8572', 9685, 11062, '10561', '17820', 16637, 5890, 17180, '17511', '13203', 13303, '7330', 7186, '10213', '8063', '12283', 15564, 17664, '8996', '12179', '13657', 15817, '16187', '6381', 8409, '5177', 17357, '10814', 6679, 12241, '6556', 12913, 16454, '17589', 5292, '13639', '7335', '11531', '14346', 7493, 15850, '12791', 11288)

# Преобразование строковых значений в числа
rps_values = [int(value) for value in rps_values if isinstance(value, str) and value.isdigit()]

# Расчет среднего значения
average = sum(rps_values) // len(rps_values)

# Расчет медианного значения
sorted_rps_values = sorted(rps_values)
quotient, remainder = divmod(len(sorted_rps_values), 2)
median = sorted_rps_values[quotient] if remainder else sum(sorted_rps_values[quotient - 1:quotient + 1]) // 2

# Определение характера нагрузки
difference = abs(average - median)
threshold = 0.3 * median

if difference <= threshold:
    result = "Стабильная"
elif average > median:
    result = "Скачки"
else:
    result = "Снижения"

# Вывод результатов
print(average, median, result)
